#include <stdio.h>
#include <limits.h>

int main() {
    int n, i, j, k, L, q;

    // Input the number of matrices
    printf("Enter the number of matrices: ");
    scanf("%d", &n);

    int p[n+1];  // Array to store the dimensions of matrices
    int m[n][n]; // m[i][j] stores the minimum multiplication cost for matrices from i to j

    // Input the dimensions of matrices
    printf("Enter the dimensions of the matrices (n+1 numbers):\n");
    for (i = 0; i <= n; i++) {
        scanf("%d", &p[i]);
    }

    // Initialize the cost of multiplying one matrix to itself as 0
    for (i = 1; i < n; i++) {
        m[i][i] = 0;
    }

    // L is the chain length, starting from 2
    for (L = 2; L < n; L++) {
        for (i = 1; i <= n - L; i++) {
            j = i + L - 1;
            m[i][j] = INT_MAX; // Set the minimum cost to a large number (infinity)

            // Try all possible splits and calculate the cost
            for (k = i; k <= j - 1; k++) {
                // Cost of splitting the product at position k
                q = m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j];

                // Update the minimum cost
                if (q < m[i][j]) {
                    m[i][j] = q;
                }
            }
        }
    }

    // Print the minimum number of scalar multiplications needed
    printf("Minimum number of multiplications is: %d\n", m[1][n-1]);

    return 0;
}
