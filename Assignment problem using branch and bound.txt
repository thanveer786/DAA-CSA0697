#include <stdio.h>
#include <limits.h>

#define MAX 10

int main() {
    int cost[MAX][MAX];
    int n,i,j,col;
    int minCost = INT_MAX;  // Variable to store the minimum cost
    int assignment[MAX];     // Array to store the optimal assignment
    int mask = 0;            // Bitmask for assigned tasks

    printf("Enter the number of agents/tasks (n): ");
    scanf("%d", &n);

    printf("Enter the cost matrix (%d x %d):\n", n, n);
    for ( i = 0; i < n; i++) {
        for ( j = 0; j < n; j++) {
            scanf("%d", &cost[i][j]);
        }
    }

    // Branch and Bound logic
    int stack[MAX][3];  // Stack for storing (mask, row, currentCost)
    int top = -1;

    // Push initial state onto the stack
    stack[++top][0] = mask;   // initial mask
    stack[top][1] = 0;        // initial row
    stack[top][2] = 0;        // initial cost

    while (top >= 0) {
        // Pop the top element from the stack
        mask = stack[top][0];
        int row = stack[top][1];
        int currentCost = stack[top][2];
        top--; // Remove the element from the stack

        // If all rows are processed, check for the minimum cost
        if (row == n) {
            if (currentCost < minCost) {
                minCost = currentCost;
                // Store the current assignment
                for ( i = 0; i < n; i++) {
                    assignment[i] = (mask >> (i * n)) & (n - 1);
                }
            }
            continue;
        }

        // Explore all columns for the current row
        for (col = 0; col < n; col++) {
            // Check if the column is already assigned (mask)
            if (!(mask & (1 << (col + row * n)))) {
                // Push the new state onto the stack
                stack[++top][0] = mask | (1 << (col + row * n)); // Update mask
                stack[top][1] = row + 1;                           // Move to the next row
                stack[top][2] = currentCost + cost[row][col];    // Update current cost
            }
        }
    }

    // Output the minimum cost and the optimal assignment
    printf("Minimum cost: %d\n", minCost);
    printf("Optimal assignment:\n");
    for (i = 0; i < n; i++) {
        printf("Task %d is assigned to Agent %d\n", i + 1, assignment[i] + 1);
    }

    return 0;
}
