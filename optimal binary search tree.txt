#include <stdio.h>
#include <limits.h>

#define MAX 100

int cost[MAX][MAX]; // Cost of the subtree
int root[MAX][MAX]; // Root of the subtree
int i,j,chainLength,r;

// Function to calculate optimal BST
void optimalBST(int keys[], int freq[], int n) {
    for ( i = 0; i < n; i++) {
        cost[i][i] = freq[i]; // Cost of single key
        root[i][i] = i;       // Root of single key is itself
    }

    // Fill cost and root for chains of length 2 to n
    for ( chainLength = 2; chainLength <= n; chainLength++) {
        for ( i = 0; i <= n - chainLength; i++) {
            int j = i + chainLength - 1;
            cost[i][j] = INT_MAX; // Initialize cost to a large value

            // Try making each key in the subarray the root
            for ( r = i; r <= j; r++) {
                // Calculate cost of this subtree
                int c = ((r > i) ? cost[i][r - 1] : 0) + // Cost of left subtree
                        ((r < j) ? cost[r + 1][j] : 0) + // Cost of right subtree
                        freq[i] + freq[r] + freq[j]; // Total frequency of keys

                // If cost is less, update it
                if (c < cost[i][j]) {
                    cost[i][j] = c; // Update cost
                    root[i][j] = r; // Update root
                }
            }
        }
    }
}

// Function to print the structure of the Optimal Binary Search Tree
void printOptimalBST(int i, int j) {
    if (i > j)
        return;

    // Print the root of the current subtree
    printf("Root of keys from %d to %d is key %d\n", i, j, root[i][j]);

    // Recur for left and right subtrees
    printOptimalBST(i, root[i][j] - 1); // Left subtree
    printOptimalBST(root[i][j] + 1, j); // Right subtree
}

int main() {
    int n; // Number of keys
    int keys[MAX], freq[MAX];

    // Input the number of keys
    printf("Enter the number of keys: ");
    scanf("%d", &n);

    // Input the keys and their corresponding frequencies
    printf("Enter the keys:\n");
    for ( i = 0; i < n; i++) {
        scanf("%d", &keys[i]);
    }

    printf("Enter the frequencies corresponding to the keys:\n");
    for ( i = 0; i < n; i++) {
        scanf("%d", &freq[i]);
    }

    // Calculate the optimal BST
    optimalBST(keys, freq, n);

    // Print the structure of the optimal BST
    printf("\nOptimal Binary Search Tree structure:\n");
    printOptimalBST(0, n - 1);

    // Print the minimum cost
    printf("\nMinimum cost of the Optimal Binary Search Tree: %d\n", cost[0][n - 1]);

    return 0;
}
