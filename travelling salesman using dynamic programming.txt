#include <stdio.h>
#include <limits.h>

#define MAX 20
#define INF INT_MAX

int n,city;
int dist[MAX][MAX];  // Distance matrix
int dp[MAX][1 << MAX];  // DP table for memoization

// Function to find the minimum cost path
int tsp(int pos, int mask) {
    if (mask == ((1 << n) - 1)) {
        return dist[pos][0];  // Return to the starting point
    }

    if (dp[pos][mask] != -1) {
        return dp[pos][mask];
    }

    int ans = INF;
    for ( city = 0; city < n; city++) {
        // If the city is not visited
        if ((mask & (1 << city)) == 0) {
            int newAns = dist[pos][city] + tsp(city, mask | (1 << city));
            ans = (newAns < ans) ? newAns : ans;
        }
    }

    return dp[pos][mask] = ans;
}

int main() {
    printf("Enter number of cities: ");
    scanf("%d", &n);
    int i,j;
    printf("Enter the distance matrix:\n");
    for ( i = 0; i < n; i++) {
        for ( j = 0; j < n; j++) {
            scanf("%d", &dist[i][j]);
        }
    }

    // Initialize DP table with -1
    for ( i = 0; i < n; i++) {
        for ( j = 0; j < (1 << n); j++) {
            dp[i][j] = -1;
        }
    }

    printf("Minimum cost of travelling: %d\n", tsp(0, 1));  // Start from city 0 with mask 1

    return 0;
}
